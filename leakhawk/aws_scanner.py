"""
AWS Scanner module for LeakHawk.

This module handles scanning AWS resources for secrets in environment variables.
"""

import logging
import re
from typing import Dict, List, Optional, Any

import boto3
from botocore.exceptions import ClientError

logger = logging.getLogger("leakhawk.aws_scanner")

# Try to import SecretVerifier, but don't fail if it's not available
try:
    from leakhawk.verification import SecretVerifier
    has_verification = True
except ImportError:
    has_verification = False
    # Create a simple placeholder for SecretVerifier
    class SecretVerifier:
        @staticmethod
        def is_secret_reference(value):
            return False
        
        @staticmethod
        def verify_finding(finding, env_value=None):
            return True


class AWSScanner:
    """Scanner for AWS resources."""
    
    def __init__(
        self, 
        access_key: str, 
        secret_key: str, 
        session_token: Optional[str] = None,
        region: str = "us-east-1",
        custom_patterns: Optional[List[Dict[str, str]]] = None
    ):
        """Initialize the AWS scanner.
        
        Args:
            access_key: AWS access key ID
            secret_key: AWS secret access key
            session_token: AWS session token (optional)
            region: AWS region to scan
            custom_patterns: List of custom regex patterns (optional)
        """
        self.access_key = access_key
        self.secret_key = secret_key
        self.session_token = session_token
        self.region = region
        
        # Create session
        self.session = boto3.Session(
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
            aws_session_token=session_token,
            region_name=region
        )
        
        # Create clients
        self.lambda_client = self.session.client("lambda")
        self.ecs_client = self.session.client("ecs")
        self.sts_client = self.session.client("sts")
        
        # Default patterns for detecting secrets
        self.secret_patterns = [
            (r"api[_-]?key", "API Key", "high"),
            (r"auth[_-]?token", "Auth Token", "high"),
            (r"secret", "Secret", "critical"),
            (r"password", "Password", "high"),
            (r"credential", "Credential", "high"),
            (r"private[_-]?key", "Private Key", "critical"),
            (r"access[_-]?key", "Access Key", "critical"),
            (r"connection[_-]?string", "Connection String", "high"),
            (r"jwt", "JWT Token", "medium"),
            (r"token", "Token", "medium"),
            (r"key", "Key", "medium"),
        ]
        
        # Add custom patterns if provided
        if custom_patterns:
            for pattern in custom_patterns:
                self.secret_patterns.append(
                    (pattern["pattern"], pattern["name"], pattern["severity"])
                )
        
        # List of common non-secret environment variables to exclude
        self.non_secret_vars = [
            r"path$",
            r"_path$",
            r"_url$",
            r"_endpoint$",
            r"_host$",
            r"_port$",
            r"_region$",
            r"_enabled$",
            r"_mode$",
            r"_level$",
            r"_type$",
            r"_name$",
            r"_id$",
            r"_ttl$",
            r"_timeout$",
            r"_version$",
            r"_env$",
            r"_dir$",
            r"_file$",
            r"_config$",
            r"_settings$",
            r"_options$",
            r"_params$",
            r"_args$",
            r"_flags$",
            r"_prefix$",
            r"_suffix$",
            r"_format$",
            r"_pattern$",
            r"_template$",
            r"_schema$",
            r"_model$",
            r"_class$",
            r"_function$",
            r"_method$",
            r"_handler$",
            r"_callback$",
            r"_listener$",
            r"_subscriber$",
            r"_publisher$",
            r"_producer$",
            r"_consumer$",
            r"_worker$",
            r"_job$",
            r"_task$",
            r"_queue$",
            r"_topic$",
            r"_channel$",
            r"_stream$",
            r"_pool$",
            r"_cache$",
            r"_store$",
            r"_db$",
            r"_database$",
            r"_table$",
            r"_collection$",
            r"_bucket$",
            r"_container$",
            r"_folder$",
            r"_directory$",
            r"_log$",
            r"_logger$",
            r"_debug$",
            r"_trace$",
            r"_verbose$",
            r"_silent$",
            r"_quiet$",
            r"_color$",
            r"_style$",
            r"_theme$",
            r"_locale$",
            r"_language$",
            r"_timezone$",
            r"_date$",
            r"_time$",
            r"_encoding$",
            r"_charset$",
            r"_mime$",
            r"_content$",
            r"_data$",
            r"_info$",
            r"_meta$",
            r"_header$",
            r"_footer$",
            r"_body$",
            r"_request$",
            r"_response$",
            r"_status$",
            r"_code$",
            r"_error$",
            r"_warning$",
            r"_success$",
            r"_fail$",
            r"_retry$",
            r"_interval$",
            r"_delay$",
            r"_wait$",
            r"_sleep$",
            r"_limit$",
            r"_max$",
            r"_min$",
            r"_count$",
            r"_size$",
            r"_length$",
            r"_width$",
            r"_height$",
            r"_depth$",
            r"_radius$",
            r"_diameter$",
            r"_scale$",
            r"_zoom$",
            r"_offset$",
            r"_padding$",
            r"_margin$",
            r"_border$",
            r"_align$",
            r"_position$",
            r"_location$",
            r"_address$",
            r"_coordinate$",
            r"_latitude$",
            r"_longitude$",
            r"_altitude$",
            r"_speed$",
            r"_velocity$",
            r"_acceleration$",
            r"_force$",
            r"_pressure$",
            r"_temperature$",
            r"_humidity$",
            r"_volume$",
            r"_weight$",
            r"_mass$",
            r"_density$",
            r"_frequency$",
            r"_amplitude$",
            r"_phase$",
            r"_wave$",
            r"_signal$",
            r"_noise$",
            r"_filter$",
            r"_buffer$",
            r"_capacity$",
            r"_threshold$",
            r"_tolerance$",
            r"_precision$",
            r"_accuracy$",
            r"_resolution$",
            r"_quality$",
            r"_grade$",
            r"_tier$",
            r"_rank$",
            r"_score$",
            r"_point$",
            r"_value$",
            r"_default$",
            r"_fallback$",
            r"_backup$",
            r"_restore$",
            r"_save$",
            r"_load$",
            r"_read$",
            r"_write$",
            r"_input$",
            r"_output$",
            r"_source$",
            r"_target$",
            r"_destination$",
            r"_origin$",
            r"_start$",
            r"_end$",
            r"_begin$",
            r"_finish$",
            r"_initial$",
            r"_final$",
            r"_first$",
            r"_last$",
            r"_next$",
            r"_previous$",
            r"_current$",
            r"_old$",
            r"_new$",
            r"_legacy$",
            r"_modern$",
            r"_classic$",
            r"_vintage$",
            r"_retro$",
            r"_future$",
            r"_past$",
            r"_present$",
            r"_temporary$",
            r"_permanent$",
            r"_static$",
            r"_dynamic$",
            r"_fixed$",
            r"_variable$",
            r"_constant$",
            r"_volatile$",
            r"_stable$",
            r"_unstable$",
            r"_valid$",
            r"_invalid$",
            r"_correct$",
            r"_incorrect$",
            r"_true$",
            r"_false$",
            r"_yes$",
            r"_no$",
            r"_on$",
            r"_off$",
            r"_enable$",
            r"_disable$",
            r"_active$",
            r"_inactive$",
            r"_available$",
            r"_unavailable$",
            r"_visible$",
            r"_invisible$",
            r"_hidden$",
            r"_shown$",
            r"_display$",
            r"_render$",
            r"_draw$",
            r"_paint$",
            r"_background$",
            r"_foreground$",
            r"_highlight$",
            r"_shadow$",
            r"_opacity$",
            r"_transparent$",
            r"_opaque$",
            r"_blur$",
            r"_sharp$",
            r"_focus$",
            r"_rotate$",
            r"_flip$",
            r"_mirror$",
            r"_resize$",
            r"_crop$",
            r"_trim$",
            r"_pad$",
            r"_extend$",
            r"_expand$",
            r"_shrink$",
            r"_grow$",
            r"_stretch$",
            r"_compress$",
            r"_decompress$",
            r"_zip$",
            r"_unzip$",
            r"_pack$",
            r"_unpack$",
            r"_bundle$",
            r"_unbundle$",
            r"_merge$",
            r"_split$",
            r"_join$",
            r"_separate$",
            r"_combine$",
            r"_divide$",
            r"_multiply$",
            r"_add$",
            r"_subtract$",
            r"_increment$",
            r"_decrement$",
            r"_increase$",
            r"_decrease$",
            r"_double$",
            r"_triple$",
            r"_quadruple$",
            r"_half$",
            r"_quarter$",
            r"_third$",
            r"_percent$",
            r"_fraction$",
            r"_decimal$",
            r"_integer$",
            r"_float$",
            r"_number$",
            r"_digit$",
            r"_letter$",
            r"_character$",
            r"_symbol$",
            r"_emoji$",
            r"_icon$",
            r"_logo$",
            r"_brand$",
            r"_trademark$",
            r"_copyright$",
            r"_license$",
            r"_permission$",
            r"_restriction$",
            r"_limitation$",
            r"_constraint$",
            r"_rule$",
            r"_policy$",
            r"_term$",
            r"_condition$",
            r"_agreement$",
            r"_contract$",
            r"_deal$",
            r"_offer$",
            r"_proposal$",
            r"_bid$",
            r"_quote$",
            r"_estimate$",
            r"_invoice$",
            r"_receipt$",
            r"_bill$",
            r"_payment$",
            r"_transaction$",
            r"_transfer$",
            r"_deposit$",
            r"_withdrawal$",
            r"_balance$",
            r"_account$",
            r"_user$",
            r"_customer$",
            r"_client$",
            r"_vendor$",
            r"_supplier$",
            r"_partner$",
            r"_affiliate$",
            r"_associate$",
            r"_member$",
            r"_subscriber$",
            r"_follower$",
            r"_leader$",
            r"_manager$",
            r"_admin$",
            r"_owner$",
            r"_creator$",
            r"_author$",
            r"_editor$",
            r"_reviewer$",
            r"_moderator$",
            r"_curator$",
            r"_collector$",
            r"_gatherer$",
            r"_harvester$",
            r"_miner$",
            r"_extractor$",
            r"_processor$",
            r"_analyzer$",
            r"_interpreter$",
            r"_translator$",
            r"_converter$",
            r"_transformer$",
            r"_mapper$",
            r"_reducer$",
            r"_sorter$",
            r"_grouper$",
            r"_aggregator$",
            r"_summarizer$",
            r"_reporter$",
            r"_notifier$",
            r"_alerter$",
            r"_monitor$",
            r"_tracker$",
            r"_recorder$",
            r"_player$",
            r"_viewer$",
            r"_browser$",
            r"_explorer$",
            r"_navigator$",
            r"_searcher$",
            r"_finder$",
            r"_locator$",
            r"_detector$",
            r"_sensor$",
            r"_probe$",
            r"_scanner$",
            r"_reader$",
            r"_writer$",
            r"_printer$",
            r"_copier$",
            r"_fax$",
            r"_phone$",
            r"_mobile$",
            r"_tablet$",
            r"_laptop$",
            r"_desktop$",
            r"_server$",
            r"_client$",
            r"_host$",
            r"_guest$",
            r"_visitor$",
            r"_stranger$",
            r"_friend$",
            r"_enemy$",
            r"_ally$",
            r"_foe$",
            r"_opponent$",
            r"_competitor$",
            r"_rival$",
            r"_adversary$",
            r"_partner$",
            r"_teammate$",
            r"_colleague$",
            r"_coworker$",
            r"_associate$",
            r"_peer$",
            r"_equal$",
            r"_superior$",
            r"_inferior$",
            r"_junior$",
            r"_senior$",
            r"_elder$",
            r"_younger$",
            r"_older$",
            r"_newest$",
            r"_oldest$",
            r"_latest$",
            r"_earliest$",
            r"_recent$",
            r"_ancient$",
            r"_modern$",
            r"_contemporary$",
            r"_traditional$",
            r"_conventional$",
            r"_unconventional$",
            r"_standard$",
            r"_custom$",
            r"_override$",
            r"_primary$",
            r"_secondary$",
            r"_tertiary$",
            r"_quaternary$",
            r"_main$",
            r"_sub$",
            r"_super$",
            r"_hyper$",
            r"_ultra$",
            r"_extra$",
            r"_mega$",
            r"_giga$",
            r"_tera$",
            r"_peta$",
            r"_exa$",
            r"_zetta$",
            r"_yotta$",
            r"_micro$",
            r"_milli$",
            r"_centi$",
            r"_deci$",
            r"_deca$",
            r"_hecto$",
            r"_kilo$",
            r"_byte$",
            r"_bit$",
            r"_word$",
            r"_dword$",
            r"_qword$",
            r"_octet$",
            r"_nibble$",
            r"_flag$",
            r"_mask$",
            r"_hash$",
            r"_checksum$",
            r"_crc$",
            r"_md5$",
            r"_sha$",
            r"_hmac$",
            r"_signature$",
            r"_sign$",
            r"_verify$",
            r"_encrypt$",
            r"_decrypt$",
            r"_encode$",
            r"_decode$",
            r"_escape$",
            r"_unescape$",
            r"_quote$",
            r"_unquote$",
            r"_serialize$",
            r"_deserialize$",
            r"_marshal$",
            r"_unmarshal$",
            r"_parse$",
            r"_validate$",
            r"_check$",
            r"_test$",
            r"_assert$",
            r"_expect$",
            r"_assume$",
            r"_presume$",
            r"_suppose$",
            r"_guess$",
            r"_estimate$",
            r"_approximate$",
            r"_exact$",
            r"_precise$",
            r"_accurate$",
            r"_inaccurate$",
            r"_correct$",
            r"_incorrect$",
            r"_right$",
            r"_wrong$",
            r"_maybe$",
            r"_perhaps$",
            r"_possibly$",
            r"_probably$",
            r"_definitely$",
            r"_certainly$",
            r"_surely$",
            r"_absolutely$",
            r"_relatively$",
            r"_comparatively$",
            r"_proportionally$",
            r"_ratio$",
            r"_rate$",
            r"_fast$",
            r"_slow$",
            r"_quick$",
            r"_rapid$",
            r"_swift$",
            r"_gradual$",
            r"_sudden$",
            r"_abrupt$",
            r"_smooth$",
            r"_rough$",
            r"_bumpy$",
            r"_flat$",
            r"_curved$",
            r"_straight$",
            r"_crooked$",
            r"_bent$",
            r"_twisted$",
            r"_tangled$",
            r"_knotted$",
            r"_loose$",
            r"_tight$",
            r"_slack$",
            r"_taut$",
            r"_rigid$",
            r"_flexible$",
            r"_stiff$",
            r"_soft$",
            r"_hard$",
            r"_firm$",
            r"_solid$",
            r"_liquid$",
            r"_gas$",
            r"_plasma$",
            r"_matter$",
            r"_energy$",
            r"_power$",
            r"_strength$",
            r"_weakness$",
            r"_advantage$",
            r"_disadvantage$",
            r"_benefit$",
            r"_drawback$",
            r"_pro$",
            r"_con$",
            r"_plus$",
            r"_minus$",
            r"_positive$",
            r"_negative$",
            r"_neutral$",
            r"_balanced$",
            r"_imbalanced$",
            r"_symmetric$",
            r"_asymmetric$",
            r"_even$",
            r"_odd$",
            r"_regular$",
            r"_irregular$",
            r"_normal$",
            r"_abnormal$",
            r"_typical$",
            r"_atypical$",
            r"_usual$",
            r"_unusual$",
            r"_common$",
            r"_uncommon$",
            r"_rare$",
            r"_frequent$",
            r"_infrequent$",
            r"_often$",
            r"_seldom$",
            r"_never$",
            r"_always$",
            r"_sometimes$",
            r"_occasionally$",
            r"_periodically$",
            r"_regularly$",
            r"_irregularly$",
            r"_randomly$",
            r"_sequentially$",
            r"_consecutively$",
            r"_simultaneously$",
            r"_concurrently$",
            r"_parallel$",
            r"_serial$",
            r"_synchronous$",
            r"_asynchronous$",
            r"_blocking$",
            r"_nonblocking$",
            r"_nowait$",
            r"_nodelay$",
            r"_notimeout$",
            r"_deadline$",
            r"_schedule$",
            r"_calendar$",
            r"_day$",
            r"_week$",
            r"_month$",
            r"_year$",
            r"_decade$",
            r"_century$",
            r"_millennium$",
            r"_era$",
            r"_epoch$",
            r"_age$",
            r"_period$",
            r"_duration$",
            r"_span$",
            r"_range$",
            r"_scope$",
            r"_domain$",
            r"_area$",
            r"_zone$",
            r"_sector$",
            r"_segment$",
            r"_section$",
            r"_part$",
            r"_piece$",
            r"_chunk$",
            r"_block$",
            r"_fragment$",
            r"_portion$",
            r"_slice$",
            r"_unit$",
            r"_element$",
            r"_component$",
            r"_module$",
            r"_package$",
            r"_library$",
            r"_framework$",
            r"_platform$",
            r"_system$",
            r"_network$",
            r"_grid$",
            r"_mesh$",
            r"_web$",
            r"_graph$",
            r"_tree$",
            r"_list$",
            r"_array$",
            r"_vector$",
            r"_matrix$",
            r"_tensor$",
            r"_map$",
            r"_dictionary$",
            r"_set$",
            r"_bag$",
            r"_collection$",
            r"_group$",
            r"_cluster$",
            r"_batch$",
            r"_stack$",
            r"_queue$",
            r"_deque$",
            r"_heap$",
            r"_priority$",
            r"_order$",
            r"_sequence$",
            r"_series$",
            r"_progression$",
            r"_iteration$",
            r"_loop$",
            r"_cycle$",
            r"_circuit$",
            r"_route$",
            r"_track$",
            r"_trail$",
            r"_course$",
            r"_direction$",
            r"_orientation$",
            r"_angle$",
            r"_degree$",
            r"_radian$",
            r"_arc$",
            r"_curve$",
            r"_line$",
            r"_ray$",
            r"_point$",
            r"_vertex$",
            r"_node$",
            r"_edge$",
            r"_face$",
            r"_surface$",
            r"_space$",
            r"_dimension$",
            r"_place$",
            r"_site$",
            r"_spot$",
            r"_uri$",
            r"_urn$",
            r"_link$",
            r"_hyperlink$",
            r"_reference$",
            r"_pointer$",
            r"_handle$",
            r"_descriptor$",
            r"_identifier$",
            r"_uuid$",
            r"_guid$",
            r"_label$",
            r"_tag$",
            r"_mark$",
            r"_badge$",
            r"_emblem$",
            r"_indicator$",
            r"_meter$",
            r"_gauge$",
            r"_counter$",
            r"_timer$",
            r"_clock$",
            r"_watch$",
            r"_alarm$",
            r"_alert$",
            r"_exception$",
            r"_fault$",
            r"_defect$",
            r"_bug$",
            r"_issue$",
            r"_problem$",
            r"_trouble$",
            r"_difficulty$",
            r"_challenge$",
            r"_obstacle$",
            r"_barrier$",
            r"_hurdle$",
            r"_boundary$",
            r"_border$",
            r"_edge$",
            r"_perimeter$",
            r"_circumference$",
            r"_center$",
            r"_middle$",
            r"_core$",
            r"_heart$",
            r"_nucleus$",
            r"_kernel$",
            r"_seed$",
            r"_root$",
            r"_stem$",
            r"_trunk$",
            r"_branch$",
            r"_leaf$",
            r"_flower$",
            r"_fruit$",
            r"_vegetable$",
            r"_animal$",
            r"_mineral$",
            r"_element$",
            r"_compound$",
            r"_mixture$",
            r"_solution$",
            r"_suspension$",
            r"_colloid$",
            r"_gel$",
            r"_foam$",
            r"_emulsion$",
            r"_aerosol$",
            r"_vapor$",
            r"_steam$",
            r"_smoke$",
            r"_fog$",
            r"_mist$",
            r"_cloud$",
            r"_rain$",
            r"_snow$",
            r"_ice$",
            r"_frost$",
            r"_dew$",
            r"_water$",
            r"_air$",
            r"_fire$",
            r"_earth$",
            r"_metal$",
            r"_wood$",
            r"_stone$",
            r"_rock$",
            r"_crystal$",
            r"_gem$",
            r"_jewel$",
            r"_diamond$",
            r"_ruby$",
            r"_emerald$",
            r"_sapphire$",
            r"_pearl$",
            r"_gold$",
            r"_silver$",
            r"_bronze$",
            r"_copper$",
            r"_iron$",
            r"_steel$",
            r"_aluminum$",
            r"_titanium$",
            r"_plastic$",
            r"_rubber$",
            r"_leather$",
            r"_cloth$",
            r"_fabric$",
            r"_textile$",
            r"_fiber$",
            r"_thread$",
            r"_string$",
            r"_rope$",
            r"_cable$",
            r"_wire$",
            r"_cord$",
            r"_chain$",
            r"_knot$",
            r"_tie$",
            r"_bind$",
            r"_connect$",
            r"_attach$",
            r"_detach$",
            r"_cut$",
            r"_dice$",
            r"_chop$",
            r"_mince$",
            r"_grind$",
            r"_crush$",
            r"_pound$",
            r"_hammer$",
            r"_nail$",
            r"_screw$",
            r"_bolt$",
            r"_nut$",
            r"_washer$",
            r"_rivet$",
            r"_staple$",
            r"_clip$",
            r"_pin$",
            r"_needle$",
            r"_stitch$",
            r"_sew$",
            r"_weave$",
            r"_knit$",
            r"_crochet$",
            r"_embroider$",
            r"_quilt$",
            r"_blanket$",
            r"_sheet$",
            r"_pillow$",
            r"_cushion$",
            r"_mattress$",
            r"_bed$",
            r"_chair$",
            r"_table$",
            r"_desk$",
            r"_shelf$",
            r"_cabinet$",
            r"_drawer$",
            r"_closet$",
            r"_wardrobe$",
            r"_dresser$",
            r"_chest$",
            r"_box$",
            r"_crate$",
            r"_case$",
            r"_container$",
            r"_vessel$",
            r"_bottle$",
            r"_jar$",
            r"_can$",
            r"_cup$",
            r"_mug$",
            r"_glass$",
            r"_plate$",
            r"_bowl$",
            r"_dish$",
            r"_utensil$",
            r"_fork$",
            r"_knife$",
            r"_spoon$",
            r"_spatula$",
            r"_ladle$",
            r"_whisk$",
            r"_mixer$",
            r"_blender$",
            r"_grinder$",
            r"_juicer$",
            r"_toaster$",
            r"_oven$",
            r"_microwave$",
            r"_stove$",
            r"_grill$",
            r"_fryer$",
            r"_cooker$",
            r"_kettle$",
            r"_pot$",
            r"_pan$",
            r"_skillet$",
            r"_wok$",
            r"_griddle$",
            r"_colander$",
            r"_strainer$",
            r"_funnel$",
            r"_sieve$",
            r"_tablespoon$",
            r"_teaspoon$",
            r"_pinch$",
            r"_dash$",
            r"_drop$",
            r"_sprinkle$",
            r"_splash$",
            r"_pour$",
            r"_drip$",
            r"_flow$",
            r"_current$",
            r"_ripple$",
            r"_tide$",
            r"_flood$",
            r"_drought$",
            r"_storm$",
            r"_hurricane$",
            r"_tornado$",
            r"_cyclone$",
            r"_typhoon$",
            r"_blizzard$",
            r"_avalanche$",
            r"_landslide$",
            r"_earthquake$",
            r"_volcano$",
            r"_eruption$",
            r"_explosion$",
            r"_implosion$",
            r"_blast$",
            r"_boom$",
            r"_bang$",
            r"_crash$",
            r"_smash$",
            r"_break$",
            r"_shatter$",
            r"_crack$",
            r"_tear$",
            r"_rip$",
            r"_puncture$",
            r"_pierce$",
            r"_stab$"
        ]
    
    def get_account_id(self) -> str:
        """Get the AWS account ID.
        
        Returns:
            The AWS account ID
        """
        try:
            response = self.sts_client.get_caller_identity()
            return response["Account"]
        except ClientError as e:
            logger.error(f"Failed to get AWS account ID: {e}")
            return "unknown"
    
    def is_sensitive_env_var(self, name: str, value: str = "") -> tuple:
        """Check if an environment variable name indicates it might contain a secret.
        
        Args:
            name: The environment variable name
            value: The environment variable value (optional)
        
        Returns:
            Tuple of (is_sensitive, secret_type, severity)
        """
        # Check if this is a common non-secret variable
        name_lower = name.lower()
        
        # Skip variables that are likely paths to secrets, not secrets themselves
        if "_path" in name_lower:
            return False, "", ""
        
        # If we have the value, check if it's clearly a reference/path
        if value:
            # Check if value is a path reference (starts with /)
            if value.startswith('/'):
                return False, "", ""
            
            # Check if value is an ARN
            if value.startswith('arn:aws:'):
                return False, "", ""
            
            # Check if value is a URL/endpoint
            if value.startswith(('http://', 'https://', 'ftp://', 'sftp://')):
                return False, "", ""
            
            # Check if value looks like a table/resource name (contains hyphens and looks like naming convention)
            if '-' in value and not any(char.isupper() for char in value) and len(value.split('-')) >= 2:
                return False, "", ""
            
            # Check if value is clearly a service name or identifier
            if value in ['payments', 'users', 'transactions', 'reporting', 'notifications']:
                return False, "", ""
            
            # Check if value looks like a simple identifier (no special chars, reasonable length)
            if len(value) < 50 and value.replace('-', '').replace('_', '').replace('.', '').isalnum():
                # If it's too short or looks like an ID, probably not a secret
                if len(value) < 16:
                    return False, "", ""
        
        # Skip common non-secret environment variables
        for pattern in self.non_secret_vars:
            if re.search(pattern, name_lower):
                return False, "", ""
        
        # Check against secret patterns
        for pattern, secret_type, severity in self.secret_patterns:
            if re.search(pattern, name_lower):
                return True, secret_type, severity
        
        return False, "", ""
    
    def scan_lambda_functions(self) -> List[Dict[str, Any]]:
        """Scan Lambda functions for secrets in environment variables.
        
        Returns:
            List of findings
        """
        findings = []
        account_id = self.get_account_id()
        
        try:
            # List all Lambda functions
            paginator = self.lambda_client.get_paginator("list_functions")
            for page in paginator.paginate():
                for function in page["Functions"]:
                    function_name = function["FunctionName"]
                    
                    # Check if the function has environment variables
                    if "Environment" in function and "Variables" in function["Environment"]:
                        env_vars = function["Environment"]["Variables"]
                        
                        # Check each environment variable
                        for env_name, env_value in env_vars.items():
                            is_sensitive, secret_type, severity = self.is_sensitive_env_var(env_name, env_value)
                            
                            if is_sensitive:
                                # Check if the value is a reference to a secret
                                is_reference = False
                                if has_verification:
                                    is_reference = SecretVerifier.is_secret_reference(env_value)
                                
                                findings.append({
                                    "resource_id": function["FunctionArn"],
                                    "resource_name": function_name,
                                    "resource_type": "lambda",
                                    "account_id": account_id,
                                    "region": self.region,
                                    "environment_variable": env_name,
                                    "secret_type": secret_type,
                                    "severity": severity,
                                    "detected_at": function["LastModified"],
                                    "is_reference": is_reference,
                                    "value_preview": env_value[:20] + "..." if len(env_value) > 20 else env_value
                                })
    
        except ClientError as e:
            logger.error(f"Error scanning Lambda functions: {e}")
        
        return findings
    
    def scan_ecs_tasks(self) -> List[Dict[str, Any]]:
        """Scan ECS task definitions for secrets in environment variables.
        
        Returns:
            List of findings
        """
        findings = []
        account_id = self.get_account_id()
        
        try:
            # List all task definitions
            paginator = self.ecs_client.get_paginator("list_task_definitions")
            for page in paginator.paginate():
                for task_def_arn in page["taskDefinitionArns"]:
                    # Get task definition details
                    task_def = self.ecs_client.describe_task_definition(
                        taskDefinition=task_def_arn
                    )["taskDefinition"]
                    
                    task_name = task_def_arn.split("/")[-1].split(":")[0]
                    
                    # Check each container definition
                    for container in task_def["containerDefinitions"]:
                        # Check environment variables
                        if "environment" in container:
                            for env in container["environment"]:
                                env_name = env["name"]
                                env_value = env.get("value", "")
                                
                                is_sensitive, secret_type, severity = self.is_sensitive_env_var(env_name, env_value)
                                
                                if is_sensitive:
                                    # Check if the value is a reference to a secret
                                    is_reference = False
                                    if has_verification:
                                        is_reference = SecretVerifier.is_secret_reference(env_value)
                                
                                findings.append({
                                    "resource_id": task_def_arn,
                                    "resource_name": task_name,
                                    "resource_type": "ecs",
                                    "account_id": account_id,
                                    "region": self.region,
                                    "environment_variable": env_name,
                                    "secret_type": secret_type,
                                    "severity": severity,
                                    "detected_at": task_def["registeredAt"].isoformat() if "registeredAt" in task_def else "unknown",
                                    "is_reference": is_reference,
                                    "value_preview": env_value[:20] + "..." if len(env_value) > 20 else env_value
                                })
    
        except ClientError as e:
            logger.error(f"Error scanning ECS task definitions: {e}")
        
        return findings
