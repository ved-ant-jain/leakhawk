"""
Slack Notifier module for LeakHawk.

This module handles sending notifications to Slack.
"""

import json
import logging
from typing import Dict, Any
import urllib.request
import urllib.error

logger = logging.getLogger("leakhawk.slack_notifier")


class SlackNotifier:
    """Notifier for Slack."""
    
    def __init__(self, webhook_url: str):
        """Initialize the Slack notifier.
        
        Args:
            webhook_url: Slack webhook URL
        """
        self.webhook_url = webhook_url
    
    def send_notification(self, data: Dict[str, Any]) -> bool:
        """Send a notification to Slack.
        
        Args:
            data: Data to include in the notification
            
        Returns:
            True if successful, False otherwise
        """
        try:
            # Create Slack message payload
            payload = {
                "text": f"ðŸš¨ *LeakHawk Alert*: Secret detected in {data['resource_info']['name']}",
                "blocks": [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "ðŸš¨ LeakHawk Secret Detection Alert",
                            "emoji": True
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": f"*Resource:*\n{data['resource_info']['name']}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*Type:*\n{data['resource_info']['type']}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*AWS Account:*\n{data['resource_info']['account_id']}"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*Region:*\n{data['resource_info']['region']}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": f"*Environment Variable:*\n`{data['variable']}`"
                            },
                            {
                                "type": "mrkdwn",
                                "text": f"*Detected At:*\n{data['timestamp']}"
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"*Request ID:*\n{data['execution_context']['aws_request_id'] or 'N/A'}"
                        }
                    },
                    {
                        "type": "divider"
                    },
                    {
                        "type": "context",
                        "elements": [
                            {
                                "type": "mrkdwn",
                                "text": "This alert was generated by LeakHawk Runtime Protection"
                            }
                        ]
                    }
                ]
            }
            
            # Send the request
            req = urllib.request.Request(
                self.webhook_url,
                data=json.dumps(payload).encode('utf-8'),
                headers={'Content-Type': 'application/json'}
            )
            
            with urllib.request.urlopen(req) as response:
                return response.status == 200
        
        except urllib.error.URLError as e:
            logger.error(f"Error sending Slack notification: {e}")
            return False
        except Exception as e:
            logger.error(f"Unexpected error sending Slack notification: {e}")
            return False
